console.log('connected 2.1_regvalidate.js');

// Register form
const regform = document.querySelector('#reg-form');
const regemail = document.querySelector('#reg-email');
const regpassword = document.querySelector('#reg-password');
const regcaptcha = document.querySelector('#reg-form .g-recaptcha');
const regLoader = document.querySelector('.reg-loader');
// Email errors from backend validation
const emailsmall = document.querySelector('#reg-form .email-small');
const emailerr = document.querySelector('#reg-form .email-error');
const captchasmall = document.querySelector('#reg-form .captcha-small');

// Login form
const loginForm = document.querySelector('#login-form');
const loginEmail = document.querySelector('#login-email');
const loginCaptcha = document.querySelector('#login-form .g-recaptcha');
const loginBtn = document.querySelector('#login-btn');
// const regLoader = document.querySelector('.reg-loader');
// Errors display
const loginEmailsmall = document.querySelector('#login-form .email-small');
const loginCaptchasmall = document.querySelector('#login-form .captcha-small');

// Registration form Monitor errors
let registrationErrors = {
  emailbackend: true,
  email: true,
  password: true,
  recaptcha: true
};

// Login form errors monitor
let loginErrors = {
  email: true,
};

// Registration Errors status on button click
regbutton.addEventListener('click', () => {
  console.log(registrationErrors);
  console.log(allFalse(registrationErrors));
});

// Email field error set True on focus in
regemail.addEventListener('focusin', () => {
  registrationErrors.emailbackend = true;
});

// If errors prevent form submit
regform.addEventListener('submit', (e) => {
  if(!allFalse(registrationErrors)) {
    e.preventDefault();
    validateEmail(regemail);
    validateCaptcha();
    validatePassword();
    checkEmail();
    return false;
  }
  regbutton.disabled = true;
  regbutton.style.pointerEvents = "none"; 
  regbutton.style.opacity = 0.3;
  regLoader.innerHTML = `
    <?xml version="1.0" encoding="utf-8"?>
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="60px" height="60px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
    <path d="M10 50A40 40 0 0 0 90 50A40 43 0 0 1 10 50" fill="#ececec" stroke="none">
      <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 51.5;360 50 51.5"></animateTransform>
    </path>
    <!-- [ldio] generated by https://loading.io/ --></svg>
  `;
});

// Email presence in database validation 
regemail.addEventListener('focusout', () => {
  checkEmail();
});

// Validate email
regemail.addEventListener('keyup', (e) => {
  validateEmail(regemail);
});

// Validate password
regpassword.addEventListener('keyup', (e) => {
  validatePassword();
});

// Output message and style on Successful Validation
function setErrorFor(input, message) {
  const formControl = input.parentElement;
  const small = formControl.querySelector('.small');

  // add error message inside small
  small.innerText = message;

  // add error class
  formControl.className = 'form-group error';
}

// Output message and style on Error
function setSuccessFor(input) {
  const formControl = input.parentElement;
  formControl.className = 'form-group success';
}

// Validate email structure
function isEmail(email) {
  return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
}

// Check database for Email presence
function checkEmail() {
  let email = document.querySelector('#reg-email').value.toLowerCase();
  
  // send email input value to /usercheck route of the API
  fetch('/usercheck', {
    method: 'post',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({email})
  })
  // receive and process response from the API
  .then(res => res.json())
  .then(data => {
    console.log(data);
    if(data.message != 'success'){
      emailsmall.innerHTML = `${data.message}`;

      const formControl = emailsmall.parentElement;
      formControl.className = 'form-group error';
      registrationErrors.emailbackend = true;
    } else {
      // emailerr.innerHTML = '';
      registrationErrors.emailbackend = false;
    }
  });
}


// Check if all errors cleared
function allFalse(obj) {
  for(let item in obj)
    if(obj[item]) return false;
    
  return true;
}

// Validate Email
function validateEmail(element) {
  const emailValue = element.value;
    
  if(emailValue === '' || emailValue === null) {
    setErrorFor(element, "Email cannot be blank");
    registrationErrors.email = true;
    loginErrors.email = true;
  } else if(emailValue.length <=6) {
    setErrorFor(element, "Email too short");
    registrationErrors.email = true;
    loginErrors.email = true;
  } else if(!isEmail(emailValue)) {
    setErrorFor(element, "Email is not valid");
    registrationErrors.email = true;
    loginErrors.email = true;
  } else {
    setSuccessFor(element);
    registrationErrors.email = false;
    loginErrors.email = false;
  } 
}

// Validate Password
function validatePassword() {
  passValue = regpassword.value;
  
  if(passValue === '' || passValue === null) {
    setErrorFor(regpassword, "Password cannot be blank");
    registrationErrors.password = true;
  } else if(passValue.length <= 6) {
    setErrorFor(regpassword, "Password must be 7+ characters");
    registrationErrors.password = true;
  } else {
    setSuccessFor(regpassword);
    registrationErrors.password = false;
  }
}

// Google reCaptcha validation
function validateCaptcha() {
  const captchaValue = regemail.value;
    
  if(registrationErrors.recaptcha != false) {
    setErrorFor(regcaptcha, "Are you human? Please check captcha");
  } else {
    setSuccessFor(regcaptcha);
  } 
}
function recaptchaCheck() {
  registrationErrors.recaptcha = false;
  setSuccessFor(regcaptcha);
}
function recaptchaCheckExp() {
  registrationErrors.recaptcha = true;
  setErrorFor(regcaptcha, "Are you human?");
}